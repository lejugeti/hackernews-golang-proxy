// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: grpc_news.proto

package hackernews

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HnService_GetTopStories_FullMethodName = "/hackernews.HnService/GetTopStories"
	HnService_Whois_FullMethodName         = "/hackernews.HnService/Whois"
)

// HnServiceClient is the client API for HnService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HnServiceClient interface {
	GetTopStories(ctx context.Context, in *TopStoriesRequest, opts ...grpc.CallOption) (*TopStories, error)
	Whois(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*User, error)
}

type hnServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHnServiceClient(cc grpc.ClientConnInterface) HnServiceClient {
	return &hnServiceClient{cc}
}

func (c *hnServiceClient) GetTopStories(ctx context.Context, in *TopStoriesRequest, opts ...grpc.CallOption) (*TopStories, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TopStories)
	err := c.cc.Invoke(ctx, HnService_GetTopStories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hnServiceClient) Whois(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, HnService_Whois_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HnServiceServer is the server API for HnService service.
// All implementations must embed UnimplementedHnServiceServer
// for forward compatibility.
type HnServiceServer interface {
	GetTopStories(context.Context, *TopStoriesRequest) (*TopStories, error)
	Whois(context.Context, *UserInfoRequest) (*User, error)
	mustEmbedUnimplementedHnServiceServer()
}

// UnimplementedHnServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHnServiceServer struct{}

func (UnimplementedHnServiceServer) GetTopStories(context.Context, *TopStoriesRequest) (*TopStories, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopStories not implemented")
}
func (UnimplementedHnServiceServer) Whois(context.Context, *UserInfoRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Whois not implemented")
}
func (UnimplementedHnServiceServer) mustEmbedUnimplementedHnServiceServer() {}
func (UnimplementedHnServiceServer) testEmbeddedByValue()                   {}

// UnsafeHnServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HnServiceServer will
// result in compilation errors.
type UnsafeHnServiceServer interface {
	mustEmbedUnimplementedHnServiceServer()
}

func RegisterHnServiceServer(s grpc.ServiceRegistrar, srv HnServiceServer) {
	// If the following call pancis, it indicates UnimplementedHnServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HnService_ServiceDesc, srv)
}

func _HnService_GetTopStories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopStoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HnServiceServer).GetTopStories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HnService_GetTopStories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HnServiceServer).GetTopStories(ctx, req.(*TopStoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HnService_Whois_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HnServiceServer).Whois(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HnService_Whois_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HnServiceServer).Whois(ctx, req.(*UserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HnService_ServiceDesc is the grpc.ServiceDesc for HnService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HnService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hackernews.HnService",
	HandlerType: (*HnServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTopStories",
			Handler:    _HnService_GetTopStories_Handler,
		},
		{
			MethodName: "Whois",
			Handler:    _HnService_Whois_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc_news.proto",
}
